// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: trip.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearTestTrips = `-- name: ClearTestTrips :execrows
DELETE FROM trips
`

func (q *Queries) ClearTestTrips(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, clearTestTrips)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  courier_id, business_id, pickup_address, dropoff_address, pick_up, drop_off
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, pickup_address, dropoff_address, pick_up, drop_off, courier_id, status, cost, business_id, created_at, updated_at
`

type CreateTripParams struct {
	CourierID      uuid.NullUUID `json:"courier_id"`
	BusinessID     uuid.UUID     `json:"business_id"`
	PickupAddress  string        `json:"pickup_address"`
	DropoffAddress string        `json:"dropoff_address"`
	Pickup         interface{}   `json:"pickup"`
	Dropoff        interface{}   `json:"dropoff"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.CourierID,
		arg.BusinessID,
		arg.PickupAddress,
		arg.DropoffAddress,
		arg.Pickup,
		arg.Dropoff,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.PickupAddress,
		&i.DropoffAddress,
		&i.PickUp,
		&i.DropOff,
		&i.CourierID,
		&i.Status,
		&i.Cost,
		&i.BusinessID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTripsBelongingToBusiness = `-- name: GetTripsBelongingToBusiness :many
SELECT id, pickup_address, dropoff_address, ST_Distance(pick_up, drop_off, true) AS distance, ST_AsGeoJSON(pick_up) AS pickup, ST_AsGeoJSON(drop_off) AS dropoff, courier_id, status, created_at, updated_at FROM trips
WHERE business_id = $1
`

type GetTripsBelongingToBusinessRow struct {
	ID             uuid.UUID     `json:"id"`
	PickupAddress  string        `json:"pickup_address"`
	DropoffAddress string        `json:"dropoff_address"`
	Distance       interface{}   `json:"distance"`
	Pickup         interface{}   `json:"pickup"`
	Dropoff        interface{}   `json:"dropoff"`
	CourierID      uuid.NullUUID `json:"courier_id"`
	Status         string        `json:"status"`
	CreatedAt      time.Time     `json:"created_at"`
	UpdatedAt      time.Time     `json:"updated_at"`
}

func (q *Queries) GetTripsBelongingToBusiness(ctx context.Context, businessID uuid.UUID) ([]GetTripsBelongingToBusinessRow, error) {
	rows, err := q.db.QueryContext(ctx, getTripsBelongingToBusiness, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTripsBelongingToBusinessRow{}
	for rows.Next() {
		var i GetTripsBelongingToBusinessRow
		if err := rows.Scan(
			&i.ID,
			&i.PickupAddress,
			&i.DropoffAddress,
			&i.Distance,
			&i.Pickup,
			&i.Dropoff,
			&i.CourierID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
