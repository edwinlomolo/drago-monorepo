// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const clearTestSessions = `-- name: ClearTestSessions :execrows
DELETE FROM sessions
`

func (q *Queries) ClearTestSessions(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, clearTestSessions)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const clearTestUsers = `-- name: ClearTestUsers :execrows
DELETE FROM users
`

func (q *Queries) ClearTestUsers(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, clearTestUsers)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  ip, user_agent, expired, user_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_agent, ip, expired, user_id, created_at, updated_at
`

type CreateSessionParams struct {
	Ip        sql.NullString `json:"ip"`
	UserAgent sql.NullString `json:"user_agent"`
	Expired   sql.NullTime   `json:"expired"`
	UserID    uuid.NullUUID  `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Ip,
		arg.UserAgent,
		arg.Expired,
		arg.UserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.Ip,
		&i.Expired,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  firstname, lastname, email
) VALUES (
  $1, $2, $3
) RETURNING id, firstname, lastname, phone, email, onboarding, created_at, updated_at
`

type CreateUserParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Firstname, arg.Lastname, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Email,
		&i.Onboarding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const destroySession = `-- name: DestroySession :one
UPDATE sessions
SET expired = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING id, user_agent, ip, expired, user_id, created_at, updated_at
`

func (q *Queries) DestroySession(ctx context.Context, userID uuid.NullUUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, destroySession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.Ip,
		&i.Expired,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const finishOnboarding = `-- name: FinishOnboarding :one
UPDATE sessions
SET onboarding = FALSE
WHERE id = $1 RETURNING id, user_agent, ip, expired, user_id, created_at, updated_at
`

func (q *Queries) FinishOnboarding(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, finishOnboarding, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.Ip,
		&i.Expired,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_agent, ip, expired, user_id, created_at, updated_at FROM sessions
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, userID uuid.NullUUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.Ip,
		&i.Expired,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, firstname, lastname, phone, email, onboarding, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Email,
		&i.Onboarding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersByID = `-- name: GetUsersByID :many
SELECT id, firstname, lastname, phone, email, created_at, updated_at FROM users
WHERE id IN ($1::uuid[])
`

func (q *Queries) GetUsersByID(ctx context.Context, ids []uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByID, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
