// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: business.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearTestBusinesses = `-- name: ClearTestBusinesses :execrows
DELETE FROM businesses
`

func (q *Queries) ClearTestBusinesses(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, clearTestBusinesses)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO businesses (
  business_type, date_created, name, logo, phone, user_id, has_in_house_logistic, location
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, business_type, name, phone, has_in_house_logistic, logo, location, date_created, user_id, created_at, updated_at
`

type CreateBusinessParams struct {
	BusinessType       string      `json:"business_type"`
	DateCreated        time.Time   `json:"date_created"`
	Name               string      `json:"name"`
	Logo               string      `json:"logo"`
	Phone              string      `json:"phone"`
	UserID             uuid.UUID   `json:"user_id"`
	HasInHouseLogistic bool        `json:"has_in_house_logistic"`
	Location           interface{} `json:"location"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, createBusiness,
		arg.BusinessType,
		arg.DateCreated,
		arg.Name,
		arg.Logo,
		arg.Phone,
		arg.UserID,
		arg.HasInHouseLogistic,
		arg.Location,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.BusinessType,
		&i.Name,
		&i.Phone,
		&i.HasInHouseLogistic,
		&i.Logo,
		&i.Location,
		&i.DateCreated,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBusinessBelongingToUser = `-- name: GetBusinessBelongingToUser :many
SELECT id, name, phone, logo, business_type, date_created, has_in_house_logistic, ST_AsGeoJSON(location) AS location, created_at, updated_at FROM businesses
WHERE user_id = $1
`

type GetBusinessBelongingToUserRow struct {
	ID                 uuid.UUID   `json:"id"`
	Name               string      `json:"name"`
	Phone              string      `json:"phone"`
	Logo               string      `json:"logo"`
	BusinessType       string      `json:"business_type"`
	DateCreated        time.Time   `json:"date_created"`
	HasInHouseLogistic bool        `json:"has_in_house_logistic"`
	Location           interface{} `json:"location"`
	CreatedAt          time.Time   `json:"created_at"`
	UpdatedAt          time.Time   `json:"updated_at"`
}

func (q *Queries) GetBusinessBelongingToUser(ctx context.Context, userID uuid.UUID) ([]GetBusinessBelongingToUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getBusinessBelongingToUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBusinessBelongingToUserRow{}
	for rows.Next() {
		var i GetBusinessBelongingToUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Logo,
			&i.BusinessType,
			&i.DateCreated,
			&i.HasInHouseLogistic,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
