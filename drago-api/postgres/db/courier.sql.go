// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: courier.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearTestCouriers = `-- name: ClearTestCouriers :execrows
DELETE FROM couriers
`

func (q *Queries) ClearTestCouriers(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, clearTestCouriers)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createCourier = `-- name: CreateCourier :one
INSERT INTO couriers (
  firstname, lastname, phone, verified, status, business_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, firstname, lastname, phone, verified, location, fcm_token, status, ratings, points, business_id, product_id, created_at, updated_at
`

type CreateCourierParams struct {
	Firstname  string    `json:"firstname"`
	Lastname   string    `json:"lastname"`
	Phone      string    `json:"phone"`
	Verified   bool      `json:"verified"`
	Status     string    `json:"status"`
	BusinessID uuid.UUID `json:"business_id"`
}

func (q *Queries) CreateCourier(ctx context.Context, arg CreateCourierParams) (Courier, error) {
	row := q.db.QueryRowContext(ctx, createCourier,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.Verified,
		arg.Status,
		arg.BusinessID,
	)
	var i Courier
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Verified,
		&i.Location,
		&i.FcmToken,
		&i.Status,
		&i.Ratings,
		&i.Points,
		&i.BusinessID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBusinessCouriers = `-- name: GetBusinessCouriers :many
SELECT id, firstname, lastname, phone, verified, ST_AsGeoJSON(location) AS location, status, product_id, created_at, updated_at
FROM couriers
WHERE business_id = $1
`

type GetBusinessCouriersRow struct {
	ID        uuid.UUID     `json:"id"`
	Firstname string        `json:"firstname"`
	Lastname  string        `json:"lastname"`
	Phone     string        `json:"phone"`
	Verified  bool          `json:"verified"`
	Location  interface{}   `json:"location"`
	Status    string        `json:"status"`
	ProductID uuid.NullUUID `json:"product_id"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

func (q *Queries) GetBusinessCouriers(ctx context.Context, businessID uuid.UUID) ([]GetBusinessCouriersRow, error) {
	rows, err := q.db.QueryContext(ctx, getBusinessCouriers, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBusinessCouriersRow{}
	for rows.Next() {
		var i GetBusinessCouriersRow
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.Verified,
			&i.Location,
			&i.Status,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourierByID = `-- name: GetCourierByID :one
SELECT id, firstname, lastname, phone, verified, location, fcm_token, status, ratings, points, business_id, product_id, created_at, updated_at FROM couriers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourierByID(ctx context.Context, id uuid.UUID) (Courier, error) {
	row := q.db.QueryRowContext(ctx, getCourierByID, id)
	var i Courier
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Verified,
		&i.Location,
		&i.FcmToken,
		&i.Status,
		&i.Ratings,
		&i.Points,
		&i.BusinessID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCourierByPhone = `-- name: GetCourierByPhone :one
SELECT id, firstname, lastname, phone, verified, location, fcm_token, status, ratings, points, business_id, product_id, created_at, updated_at FROM couriers
WHERE phone = $1 LIMIT 1
`

func (q *Queries) GetCourierByPhone(ctx context.Context, phone string) (Courier, error) {
	row := q.db.QueryRowContext(ctx, getCourierByPhone, phone)
	var i Courier
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Verified,
		&i.Location,
		&i.FcmToken,
		&i.Status,
		&i.Ratings,
		&i.Points,
		&i.BusinessID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
