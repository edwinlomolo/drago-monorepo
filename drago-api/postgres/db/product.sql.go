// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: product.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBusinessProduct = `-- name: CreateBusinessProduct :one
INSERT INTO products (
  name, descriptions, weight_class, icon, business_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, descriptions, weight_class, icon, relevance, business_id, created_at, updated_at
`

type CreateBusinessProductParams struct {
	Name         string        `json:"name"`
	Descriptions string        `json:"descriptions"`
	WeightClass  int32         `json:"weight_class"`
	Icon         string        `json:"icon"`
	BusinessID   uuid.NullUUID `json:"business_id"`
}

func (q *Queries) CreateBusinessProduct(ctx context.Context, arg CreateBusinessProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createBusinessProduct,
		arg.Name,
		arg.Descriptions,
		arg.WeightClass,
		arg.Icon,
		arg.BusinessID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Descriptions,
		&i.WeightClass,
		&i.Icon,
		&i.Relevance,
		&i.BusinessID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBusinessProducts = `-- name: GetBusinessProducts :many
SELECT name, descriptions, weight_class, icon, created_at, updated_at
FROM products
WHERE business_id = $1
`

type GetBusinessProductsRow struct {
	Name         string    `json:"name"`
	Descriptions string    `json:"descriptions"`
	WeightClass  int32     `json:"weight_class"`
	Icon         string    `json:"icon"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) GetBusinessProducts(ctx context.Context, businessID uuid.NullUUID) ([]GetBusinessProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBusinessProducts, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBusinessProductsRow{}
	for rows.Next() {
		var i GetBusinessProductsRow
		if err := rows.Scan(
			&i.Name,
			&i.Descriptions,
			&i.WeightClass,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
